{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Photo by "},{"type":"reference","isActive":true,"identifier":"https:\/\/unsplash.com\/@yer_a_wizard?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText"},{"type":"text","text":" on "},{"type":"reference","isActive":true,"identifier":"https:\/\/unsplash.com\/s\/photos\/measures?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Why can’t I just do this? With Xcode autocomplete helping us along?"}]},{"type":"codeListing","syntax":"swift","code":["let v: Velocity = 55(.kilometers, per: .hours)","print(v * 2 * 2(.hours)) \/\/  -> 220 km"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Turns out you can! Just add this "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/wildthink\/anymeasure"},{"type":"text","text":" to your project and start coding."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want a bit of the backstory and a few more details then read on."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you haven’t yet read "},{"type":"reference","isActive":true,"identifier":"https:\/\/medium.com\/@jasonj_2009\/measurement-in-swift-simplified-30207fd8282c"},{"type":"text","text":" , it’s only 2 minutes and, as an earlier work, sets the stage for improvements and updates that follow herein."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apparently, I have a character flaw that makes it difficult to be satisfied with less than an elegant solution. One that not only enables me to write clearly and succinctly but also scales from a specific to a more general solution."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given the ease of supporting simple Measurements (as previously explained) I really wanted to extend this pattern to Compound Unit Measurements or at least to the more common "},{"type":"codeVoice","code":"Ratio"},{"type":"text","text":". Every time I started in on creating a collection of new Unit combinations I became dissatisfied with the repetitiveness in creating new ones. It wasn’t really a lot of code but enough to clutter the call site and aggravate me enough to search for a solution. So after more thought and more than a bit of aggravated wrangling with generics, I worked it out; it turns out you can, with the smallest additions do this. Of course, no sooner than I worked out my own solution, I found "},{"type":"codeVoice","code":"Rate.swift"},{"type":"text","text":" at a cleaner one. So I used it, with only some small extensions following the pattern I used for the standard "},{"type":"codeVoice","code":"Measurements"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The trick is to create a generic struct using the standard Measurement "},{"type":"codeVoice","code":"Unit"},{"type":"text","text":". Add in methods for "},{"type":"codeVoice","code":"addition"},{"type":"text","text":", "},{"type":"codeVoice","code":"subtraction"},{"type":"text","text":", and "},{"type":"codeVoice","code":"multiplication"},{"type":"text","text":" along with the appropriately overloaded operators and you are off to the races."}]},{"type":"codeListing","syntax":"swift","code":["public struct Ratio<Numerator, Denominator>","where Numerator: Unit, Denominator: Unit {","    \/\/\/ The value of the numerator unit per single denominator unit.","    public var value: Double","  ","    \/\/\/ The numerator unit.","    public var numeratorUnit: Numerator","    ","    \/\/\/ The denominator unit.","    public var denominatorUnit: Denominator","    ","    \/\/\/ The ratio symbol.","    public var symbol: String {","        return \"\\(self.numeratorUnit.symbol)\/\\(self.denominatorUnit.symbol)\"","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And along with "},{"type":"codeVoice","code":"typealias"},{"type":"text","text":" and the judicious, if not clever, use of "},{"type":"codeVoice","code":"callAsFunction"},{"type":"text","text":" to enable the "},{"type":"codeVoice","code":"2(.hours)"},{"type":"text","text":"  syntax we get to use all of the "},{"type":"codeVoice","code":"Foundation"},{"type":"text","text":" Measurement Units out-of-the-box."}]},{"type":"codeListing","syntax":"swift","code":["typealias Velocity = Measurement<Ratio<UnitLength, UnitDuration>>","","public extension BinaryFloatingPoint {","    func callAsFunction <N: Dimension, D: Dimension>(","        _ numerator: N, per denominator: D)","    -> Ratio<N,D> {","        Ratio<N, D>(value: Double(self), unit: numerator, per: denominator)","    }","}","..."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There really isn’t much more than that. It’s pretty much an rinse-and-repeat for a few more data types. Refer to the GitHub project for the full source and a package you can include in your projects."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"I have learned a lot from the many, many contributors out there. To them, I say “Thank you”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For you, the reader, I look forward to your feedback and may you continue to be curious and engaged."}]},{"anchor":"Credits-&-Resources","level":4,"type":"heading","text":"Credits & Resources"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The full package is available at "},{"overridingTitleInlineContent":[{"type":"text","text":"AnyMeasure.git"}],"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/wildthink\/anymeasure","overridingTitle":"AnyMeasure.git"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"type":"text","text":"Measurement in Swift: Simplified"}],"isActive":true,"type":"reference","identifier":"https:\/\/medium.com\/@jasonj_2009\/measurement-in-swift-simplified-30207fd8282c","overridingTitle":"Measurement in Swift: Simplified"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Thanks to "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/Flight-School\/Rate"}]}]}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/anymeasure\/ratios"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/AnyMeasure\/documentation\/AnyMeasure\/Ratios","interfaceLanguage":"swift"},"abstract":[{"type":"image","identifier":"fleur-dQf7RZhMOJU-unsplash.jpg"}],"kind":"article","metadata":{"roleHeading":"Article","title":"Measurements in Swift: Enhanced & Simplified Again","role":"article","modules":[{"name":"AnyMeasure"}]},"hierarchy":{"paths":[["doc:\/\/AnyMeasure\/documentation\/AnyMeasure"]]},"references":{"fleur-dQf7RZhMOJU-unsplash.jpg":{"alt":"Drafting Tools","type":"image","identifier":"fleur-dQf7RZhMOJU-unsplash.jpg","variants":[{"url":"\/images\/fleur-dQf7RZhMOJU-unsplash.jpg","traits":["1x","light"]}]},"https://github.com/wildthink/anymeasure":{"title":"Package","titleInlineContent":[{"type":"text","text":"Package"}],"type":"link","identifier":"https:\/\/github.com\/wildthink\/anymeasure","url":"https:\/\/github.com\/wildthink\/anymeasure"},"https://github.com/Flight-School/Rate":{"title":"Flight School Rate.swift","titleInlineContent":[{"type":"text","text":"Flight School Rate.swift"}],"type":"link","identifier":"https:\/\/github.com\/Flight-School\/Rate","url":"https:\/\/github.com\/Flight-School\/Rate"},"doc://AnyMeasure/documentation/AnyMeasure":{"role":"collection","title":"AnyMeasure","abstract":[],"identifier":"doc:\/\/AnyMeasure\/documentation\/AnyMeasure","kind":"symbol","type":"topic","url":"\/documentation\/anymeasure"},"https://unsplash.com/@yer_a_wizard?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText":{"title":"Fleur","titleInlineContent":[{"type":"text","text":"Fleur"}],"type":"link","identifier":"https:\/\/unsplash.com\/@yer_a_wizard?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText","url":"https:\/\/unsplash.com\/@yer_a_wizard?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText"},"https://unsplash.com/s/photos/measures?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText":{"title":"Unsplash","titleInlineContent":[{"type":"text","text":"Unsplash"}],"type":"link","identifier":"https:\/\/unsplash.com\/s\/photos\/measures?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText","url":"https:\/\/unsplash.com\/s\/photos\/measures?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText"},"https://medium.com/@jasonj_2009/measurement-in-swift-simplified-30207fd8282c":{"title":"Measurement in Swift: Simplified","titleInlineContent":[{"type":"text","text":"Measurement in Swift: Simplified"}],"type":"link","identifier":"https:\/\/medium.com\/@jasonj_2009\/measurement-in-swift-simplified-30207fd8282c","url":"https:\/\/medium.com\/@jasonj_2009\/measurement-in-swift-simplified-30207fd8282c"}}}